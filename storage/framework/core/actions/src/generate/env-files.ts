import { env as e, envEnum } from '@stacksjs/env'
import { log } from '@stacksjs/logging'
import { path as p } from '@stacksjs/path'
import { storage } from '@stacksjs/storage'
import { envKeys } from '../../../../env'

log.info('Generating type env files...')

// generate ./storage/framework/types/env.d.ts file from .env
const envTypes = `
// This file is auto-generated by Stacks. Do not edit this file manually.
// If you want to change the environment variables, please edit the .env file.
//
// For more information, please visit: https://stacksjs.org/docs

declare module 'bun' {
  namespace env {
    ${envKeys
      .map((key) => {
        let type: string | undefined = typeof e[key]
        let value: string | boolean | number | undefined = e[key]

        if (!value) {
          if (envEnum[key]) {
            type = envEnum[key]?.map(item => `'${item}'`).join(' | ')
            value = envEnum[key]?.[0] // default to the first enum value
          }
          else {
            switch (type) {
              case 'number':
                value = '0'
                break
              case 'boolean':
                value = false
                break
              default:
                value = ''
            }
          }
        }

        type = 'string'
        if (typeof value === 'string') {
          if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
            type = 'boolean'
          }
          else if (!Number.isNaN(Number.parseFloat(value)) && Number.isFinite(Number(value))) {
            type = 'number'
          }
          else if (envEnum[key]) {
            // @ts-expect-error envEnum[key] is defined
            type = envEnum[key].map(item => `'${item}'`).join(' | ')
          }
        }
        else if (typeof value === 'number') {
          type = 'number'
        }
        else if (typeof value === 'boolean') {
          type = 'boolean'
        }

        return `const ${key}: ${type}`
      })
      .join('\n    ')}
  }
}
`

await storage.writeFile(p.frameworkPath('types/env.d.ts'), envTypes)

log.info('  - ./storage/framework/env.ts')

// generate ./storage/framework/env.ts file based on Bun.env
const env = `
// This file is auto-generated by Stacks. Do not edit this file manually.
// If you want to change the environment variables, please edit the .env file.
//
// For more information, please visit: https://stacksjs.org/docs

export const envKeys = [
  ${envKeys.map(key => `'${key}'`).join(',\n  ')}
] as const

export type EnvKey = typeof envKeys[number]
`

await storage.writeFile(p.frameworkPath('env.ts'), env)

log.info('  - ./storage/framework/env.d.ts')
