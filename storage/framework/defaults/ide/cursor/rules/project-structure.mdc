---
description: Project structure information
globs: 
---
## Project Structure

### App Directory

`./app` directory is the source where the business logic resides.

- `./app/Actions` directory is the source of truth for all actions
- `./app/Commands` directory is the source of truth for all commands
- `./app/Jobs` directory is the source of truth for all jobs
- `./app/Listeners` directory is the source of truth for all listeners
- `./app/Models` directory is the source of truth for all models
- `./app/Notifications` directory is the source of truth for all notifications

### Cloud Directory

`./cloud` directory is the source where the cloud logic resides.

- `./cloud/recipes` directory is where the cloud recipes reside that can be used when creating a new server. Similar to Laravel Forge recipes
- `./cloud/deploy-script.ts` is the scripts that is triggered when a deployment in the cloud is made
- `./cloud/Dockerfile` is the Dockerfile that is used to build the Docker image for the cloud
- `./cloud/serverless.ts` is where the automated CDK stack is defined. Used to define the serverless services
- `./cloud/servers.ts` is where the servers are defined that can be used when creating a new server. Define EC2 instances, load balancers, web servers, app servers, worker servers, etc.

### Config Directory

`./config` directory is where the configuration for the project resides.

- `./config/ai.ts` is where the AI configuration is defined
- `./config/app.ts` is where the application configuration is defined
- `./config/cache.ts` is where the cache configuration is defined
- `./config/database.ts` is where the database configuration is defined
- `./config/dns.ts` is where the DNS configuration is defined
- `./config/email.ts` is where the email configuration is defined
- `./config/git.ts` is where the git configuration is defined
- `./config/hashing.ts` is where the hashing configuration is defined
- `./config/logging.ts` is where the logging configuration is defined
- `./config/mail.ts` is where the mail configuration is defined
- `./config/notification.ts` is where the notification configuration is defined
- `./config/payment.ts` is where the payment configuration is defined
- `./config/security.ts` is where the security configuration is defined
- `./config/services.ts` is where the services configuration is defined
- `./config/storage.ts` is where the storage configuration is defined
- `./config/team.ts` is where the team configuration is defined
- `./config/ui.ts` is where the UI configuration is defined

### Database Directory

`./database` directory is where the database logic resides.

- `./database/migrations` directory is where the migrations are defined which likely are auto generated by the ORM, unless the user adds custom migrations (buddy migrate)
- `./database/seeder.ts` is where the seeder is defined which is used to seed the database (buddy seed)

### Docs Directory

`./docs` directory is where the VitePress documentation resides.

### Public Directory

`./public` directory is where the public assets reside.

You would place your static assets in this directory. Anything in this directory will be available on the web, exposed behind your domain name, the APP_URL in the .env file.

### Resources Directory

The `./resources` directory is where the resources reside.

- `./resources/assets` _directory where the assets reside_
- `./resources/assets/fonts` _directory where the fonts reside_
- `./resources/assets/styles` _directory where the CSS resides_
- `./resources/assets/styles/docs/` _directory where the Documentation CSS resides_
- `./resources/components` _directory where the user components reside. These are auto imported into the frontend_
- `./resources/components/Dashboard` _directory where the dashboard User components reside. If they clashed with default components, these will take precedence_
- `./resources/components/Docs` _directory where the documentation components reside, which will be auto imported into the documentation_
- `./resources/emails` _directory where the emails reside_
- `./resources/functions` _directory where the functions/composables reside_
- `./resources/lang` _directory where the language files reside_
- `./resources/layouts` _directory where the layouts reside_
- `./resources/modules` _directory where the modules reside_
- `./resources/plugins` _directory where the plugins reside_
- `./resources/stores` _directory where the stores reside_
- `./resources/types` _directory where the types reside_
- `./resources/views` _directory where the views reside_

## Routes Directory

The `./routes` directory is where the routes reside.

- `./routes/api.ts` _the API routes file_
- `./routes/web.ts` _the web routes file_
- `./routes/buddy.ts` _the buddy routes file (/buddy/...)_
- `./routes/users.ts` _the users routes file (/users/...)_

## Storage Directory

The `./storage` directory is where the storage resides, and the core logic of the framework.

- `./storage/framework` _the framework storage directory_
- `./storage/framework/api` _the API storage directory_
- `./storage/framework/actions` _the actions storage directory_
- `./storage/framework/browser-auto-imports.json` _the browser auto imports file_
- `./storage/framework/server-auto-imports.json` _the server auto imports file_
- `./storage/framework/cache` _the cache storage directory_
- `./storage/framework/cloud` _the cloud storage directory_
- `./storage/framework/config` _the config storage directory_
- `./storage/framework/core` _the core storage directory is where the core logic of the framework resides_
- `./storage/framework/core/actions` _the core actions package_
- `./storage/framework/core/analytics` _the core analytics package_
- `./storage/framework/core/alias` _the core alias package_
- `./storage/framework/core/api` _the core api package_
- `./storage/framework/core/arrays` _the core arrays package_
- `./storage/framework/core/auth` _the core auth package_
- `./storage/framework/core/browser` _the core browser package_
- `./storage/framework/core/build` _the core build package_
- `./storage/framework/core/bun-create` _the core bun-create package_
- `./storage/framework/core/calendar` _the core calendar package_
- `./storage/framework/core/chat` _the core chat package_
- `./storage/framework/core/cli` _the core cli package_
- `./storage/framework/core/config` _the core config package_
- `./storage/framework/core/cron` _the core cron package_
- `./storage/framework/core/database` _the core database package_
- `./storage/framework/core/datetime` _the core datetime package_
- `./storage/framework/core/dns` _the core dns package_
- `./storage/framework/core/docs` _the core docs package_
- `./storage/framework/core/events` _the core events package_
- `./storage/framework/core/faker` _the core faker package_
- `./storage/framework/core/git` _the core git package_
- `./storage/framework/core/health` _the core health package_
- `./storage/framework/core/http` _the core http package_
- `./storage/framework/core/lint` _the core lint package_
- `./storage/framework/core/logging` _the core logging package_
- `./storage/framework/core/mail` _the core mail package_
- `./storage/framework/core/notifications` _the core notifications package_
- `./storage/framework/core/objects` _the core objects package_
- `./storage/framework/core/payments` _the core payments package_
- `./storage/framework/core/query-builder` _the core query-builder package_
- `./storage/framework/core/real-time` _the core real-time package_
- `./storage/framework/core/realtime` _the core realtime package_
- `./storage/framework/core/registry` _the core registry package_
- `./storage/framework/core/router` _the core router package_
- `./storage/framework/core/scheduler` _the core scheduler package_
- `./storage/framework/core/security` _the core security package_
- `./storage/framework/core/strings` _the core strings package_
- `./storage/framework/core/testing` _the core testing package_
- `./storage/framework/core/tunnel` _the core tunnel package_
- `./storage/framework/core/ui` _the core ui package_
- `./storage/framework/core/validation` _the core validation package_
- `./storage/framework/core/vite-config` _the core vite-config package_
- `./storage/framework/core/vite-plugin` _the core vite-plugin package_
- `./storage/framework/core/whois` _the core whois package_
- `./storage/framework/core/x-ray` _the core x-ray package_
- `./storage/framework/docs` _the docs storage directory_
- `./storage/framework/libs` _the libs storage directory_
- `./storage/framework/requests` _the requests storage directory_
- `./storage/framework/types` _the types storage directory_
- `./storage/framework/views` _the views storage directory_
- `./storage/keys` _the keys storage directory_
- `./storage/private` _the private storage directory—files that get uploaded to the server, but not exposed to the web_
- `./storage/public` _the public storage directory—files that get exposed to the web_

### Tests Directory

The `./tests` directory is where the Bun tests reside.

- `./tests/unit` _directory where the unit tests reside_
- `./tests/features` _directory where the features tests reside_
- `./tests/setup.ts` _setup script for the tests_
